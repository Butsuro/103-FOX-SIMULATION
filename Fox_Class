import numpy as np
import random as rd
import math


def unitVector(vector):
   if np.linalg.norm(vector) != 1:
       vector /= np.linalg.norm(vector)
   return vector


def findClosest(canidPosition, positionList):
       lowestDist = None
       counter = 0
       for position in positionList:
           counter += 1
           if lowestDist is None or lowestDist > np.linalg.norm(position-canidPosition):
               distVector = np.array(position-canidPosition)
               lowestDist = np.linalg.norm(distVector)
               arrayPosition = counter
       return [distVector, lowestDist, arrayPosition]


class Fox:
   def __init__(self, fox_id, family, size, speed, pos, direction):
       self.fox_id = fox_id
       self.family = family
       self.size = size
       self.speed = speed
       self.pos = np.array(pos)
       self.direction = unitVector(np.array(direction))
  
   def closestCanid(self, foxPositionList):
       closest = findClosest(self.pos, foxPositionList[0])
       dirVector = unitVector(closest[0])
       distance = closest[1]
       arrayPosition = closest[2]
       if distance < 10:
           if foxPositionList[arrayPosition][1] == self.family:
               dirVector *= rd.uniform(1,2)
               self.direction = unitVector(self.direction+dirVector)
           else: self.direction = unitVector(self.direction-dirVector)
  
   def canidList(self, foxAgentList):
       foxPositionList = [[]]
       for fox in foxAgentList:
           if fox.fox_id == self.fox_id: continue
           foxPositionList.append([fox.pos, fox.family])
  
   def closestFood(self, foodList):
       closest = findClosest(self.pos, foodList)
       dirVector = unitVector(closest[0])
       distance = closest[1]
       self.direction = dirVector
      
   def makeDen(self, masterArray):
       masterArray[3][self.pos[1]][self.pos[0]] = self.family
  
   def boundaryCheck(self, xSize, ySize):
       if self.pos[0]+self.direction[0] < 0 or self.pos[0]+self.direction[0] > xSize:
           self.direction[0] += -1*self.direction[0]*rd.uniform(1,2)
       if self.pos[1]+self.direction[1] < 0 or self.pos[1]+self.direction[1] > ySize:
           self.direction[1] += -1*self.direction[1]*rd.uniform(1,2)
       self.direction = unitVector(self.direction)
          
   def move(self, foxList, masterArray):
       self.closestCanid(foxList)
       self.boundaryCheck()
       self.pos = self.pos+self.direction
       masterArray[round(self.pos[1])][round(self.pos[0])] = self.fox_id
